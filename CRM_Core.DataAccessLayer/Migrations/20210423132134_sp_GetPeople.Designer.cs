// <auto-generated />
using System;
using CRM_Core.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CRM_Core.DataAccessLayer.Migrations
{
    [DbContext(typeof(CRM_CoreDB))]
    [Migration("20210423132134_sp_GetPeople")]
    partial class sp_GetPeople
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CRM_Core.DomainLayer.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alley")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Area")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OtherAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeopleId")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Street")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("PeopleId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("CRM_Core.DomainLayer.People", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CertificateCode")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("IntroduceId")
                        .HasColumnType("int");

                    b.Property<string>("Job")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("M_Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("M_MariedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManualCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("MarriedType")
                        .HasColumnType("int");

                    b.Property<string>("P_Birthday")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("P_MariedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("TBASCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TBASGraduationId")
                        .HasColumnType("int");

                    b.Property<int?>("TBASIntroductionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TBASPotentialId")
                        .HasColumnType("int");

                    b.Property<int?>("TBASPrefixId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IntroduceId");

                    b.HasIndex("TBASCategoryId");

                    b.HasIndex("TBASGraduationId");

                    b.HasIndex("TBASIntroductionTypeId");

                    b.HasIndex("TBASPotentialId");

                    b.HasIndex("TBASPrefixId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("CRM_Core.DomainLayer.PeopleProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PeopleId")
                        .HasColumnType("int");

                    b.Property<int>("TBASPeopleTypeField")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("PeopleId");

                    b.ToTable("PeopleProperty");
                });

            modelBuilder.Entity("CRM_Core.DomainLayer.PeopleVirtual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PeopleId")
                        .HasColumnType("int");

                    b.Property<string>("Telegram")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WebSite")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WhatsApp")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("PeopleId");

                    b.ToTable("PeopleVirtual");
                });

            modelBuilder.Entity("CRM_Core.DomainLayer.TBASCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TBASCategory");
                });

            modelBuilder.Entity("CRM_Core.DomainLayer.TBASGraduation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TBASGraduation");
                });

            modelBuilder.Entity("CRM_Core.DomainLayer.TBASIntroductionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("TBASIntroductionType");
                });

            modelBuilder.Entity("CRM_Core.DomainLayer.TBASPeopleTypeField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TBASPeopleTypeField");
                });

            modelBuilder.Entity("CRM_Core.DomainLayer.TBASPotential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TBASPotential");
                });

            modelBuilder.Entity("CRM_Core.DomainLayer.TBASPrefix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TBASPrefix");
                });

            modelBuilder.Entity("CRM_Core.DomainLayer.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CRM_Core.Entities.Reservation.ClerkServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Acitve")
                        .HasColumnType("bit");

                    b.Property<int>("PeopleId")
                        .HasColumnType("int");

                    b.Property<int>("TBASServicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PeopleId");

                    b.HasIndex("TBASServicesId");

                    b.ToTable("ClerkServices");
                });

            modelBuilder.Entity("CRM_Core.Entities.Reservation.CustomerServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClerkServicesId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<bool>("isSalonCustomer")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClerkServicesId");

                    b.HasIndex("ReservationId");

                    b.ToTable("CustomerServices");
                });

            modelBuilder.Entity("CRM_Core.Entities.Reservation.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClerkId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FromTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("M_ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("P_ReservationDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("PayTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PeopleId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClerkId");

                    b.HasIndex("PayTypeId");

                    b.HasIndex("PeopleId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("CRM_Core.Entities.Reservation.TBASPayType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("TBASPayType");
                });

            modelBuilder.Entity("CRM_Core.Entities.Reservation.TBASServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("TBASServices");
                });

            modelBuilder.Entity("CRM_Core.DomainLayer.Address", b =>
                {
                    b.HasOne("CRM_Core.DomainLayer.People", "People")
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("People");
                });

            modelBuilder.Entity("CRM_Core.DomainLayer.People", b =>
                {
                    b.HasOne("CRM_Core.DomainLayer.People", "Introduce")
                        .WithMany()
                        .HasForeignKey("IntroduceId");

                    b.HasOne("CRM_Core.DomainLayer.TBASCategory", "TBASCategory")
                        .WithMany()
                        .HasForeignKey("TBASCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRM_Core.DomainLayer.TBASGraduation", "TBASGraduation")
                        .WithMany()
                        .HasForeignKey("TBASGraduationId");

                    b.HasOne("CRM_Core.DomainLayer.TBASIntroductionType", "TBASIntroductionType")
                        .WithMany()
                        .HasForeignKey("TBASIntroductionTypeId");

                    b.HasOne("CRM_Core.DomainLayer.TBASPotential", "TBASPotential")
                        .WithMany()
                        .HasForeignKey("TBASPotentialId");

                    b.HasOne("CRM_Core.DomainLayer.TBASPrefix", "TBASPrefix")
                        .WithMany()
                        .HasForeignKey("TBASPrefixId");

                    b.Navigation("Introduce");

                    b.Navigation("TBASCategory");

                    b.Navigation("TBASGraduation");

                    b.Navigation("TBASIntroductionType");

                    b.Navigation("TBASPotential");

                    b.Navigation("TBASPrefix");
                });

            modelBuilder.Entity("CRM_Core.DomainLayer.PeopleProperty", b =>
                {
                    b.HasOne("CRM_Core.DomainLayer.People", "People")
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("People");
                });

            modelBuilder.Entity("CRM_Core.DomainLayer.PeopleVirtual", b =>
                {
                    b.HasOne("CRM_Core.DomainLayer.People", "People")
                        .WithMany()
                        .HasForeignKey("PeopleId");

                    b.Navigation("People");
                });

            modelBuilder.Entity("CRM_Core.Entities.Reservation.ClerkServices", b =>
                {
                    b.HasOne("CRM_Core.DomainLayer.People", "People")
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRM_Core.Entities.Reservation.TBASServices", "TBASServices")
                        .WithMany()
                        .HasForeignKey("TBASServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("People");

                    b.Navigation("TBASServices");
                });

            modelBuilder.Entity("CRM_Core.Entities.Reservation.CustomerServices", b =>
                {
                    b.HasOne("CRM_Core.Entities.Reservation.ClerkServices", "ClerkServices")
                        .WithMany()
                        .HasForeignKey("ClerkServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRM_Core.Entities.Reservation.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClerkServices");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("CRM_Core.Entities.Reservation.Reservation", b =>
                {
                    b.HasOne("CRM_Core.DomainLayer.People", "Clerk")
                        .WithMany()
                        .HasForeignKey("ClerkId");

                    b.HasOne("CRM_Core.Entities.Reservation.TBASPayType", "TBASPayType")
                        .WithMany()
                        .HasForeignKey("PayTypeId");

                    b.HasOne("CRM_Core.DomainLayer.People", "People")
                        .WithMany()
                        .HasForeignKey("PeopleId");

                    b.HasOne("CRM_Core.Entities.Reservation.TBASServices", "TBASServices")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("Clerk");

                    b.Navigation("People");

                    b.Navigation("TBASPayType");

                    b.Navigation("TBASServices");
                });
#pragma warning restore 612, 618
        }
    }
}
